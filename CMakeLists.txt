cmake_minimum_required(VERSION 3.5)
message(STATUS "Found CMake ${CMAKE_VERSION}")
project(pong3D LANGUAGES C)


add_executable(pong3D main.c pong3d.c geometry.c renderer.c sound.c synth.c msys.c screens.c tasks.c text.c)

target_compile_options(pong3D PRIVATE -std=c99)

find_package(SDL2 QUIET)
if(SDL2_FOUND)
    include_directories(${SDL2_INCLUDE_DIRS})
    target_link_libraries(pong3D ${SDL2_LIBRARIES})
else()
    message("SDL2 package was not found. Trying with pkg-config...")
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(SDL2 REQUIRED sdl2)
    if (SDL2_FOUND)
	target_compile_options(pong3D PRIVATE ${SDL2_CFLAGS})
	target_link_libraries(pong3D ${SDL2_LIBRARIES})
    else()
	message("SDL2 not found.")
    endif()    
endif()

find_package(GLEW QUIET)
if(GLEW_FOUND)
	include_directories(${GLEW_INCLUDE_DIRS})
    	target_link_libraries(pong3D ${GLEW_LIBRARIES})
else()
    message("GLEW package was not found. Trying with pkg-config...")
    find_package(PkgConfig REQUIRED)
    pkg_check_modules(GLEW REQUIRED glew)
    if (GLEW_FOUND)
	target_compile_options(pong3D PRIVATE ${GLEW_CFLAGS})
	target_link_libraries(pong3D ${GLEW_LIBRARIES})
    else()
	message("GLEW not found.")
    endif()    
endif()
    
find_package(Freetype REQUIRED)
include_directories(${FREETYPE_INCLUDE_DIRS})
target_link_libraries(pong3D ${FREETYPE_LIBRARIES})

target_link_libraries(pong3D m)
target_link_libraries(pong3D GL)


file(COPY fonts DESTINATION .)
